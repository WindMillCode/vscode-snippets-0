{

	"file running as main": {
		"prefix": "__main__",
		"body": [
			"if __name__ == '__main__':\n\t"
		],
		"description": "execute module code"
	},
	"python function": {
		"prefix": "def",
		"body": [
			"def $1():\n\t"
		],
		"description": "generate a python function"
	},
	"python local deps": {
		"prefix": "local_deps",
		"body": [
			"from utils.local_deps import local_deps\nlocal_deps()"
		],
		"description": "local deps for local install"
	},
	"pytest assert status code": {
		"prefix": "response.status_code",
		"body": [
			"assert response.status_code == $1"
		],
		"description": "assert response status code === 200"
	},
	"flask: route": {
    "prefix": "flask: route",
    "body": [
				"@$1.route('/$4', methods=['${3/(.*)/${1:/upcase}/}'])",
        "def $1_$2():",
        "  data = request.json.get('data', {})",
        "  resp_body = $6.$2(data)",
        "  res = APIMsgFormat(data=resp_body,msg=CONFIGS.endpoint_msg_codes[\"success\"])",
        "  return res.return_flask_response()",
				"# paste to test case file",
				"def test_$1_$2(client, mocker):",
				"# arrange",
				"  $2_mock = mocker.patch('handlers.$6.$2', return_value=TestUtils.generic_fake_result)",
				"  req_body = {",
				"    'data': 'data'",
				"  }",
				"  response = client.$3('/$7/$4', json=req_body)",
				"",
				"# act",
				"  assert response.status_code == http.client.OK.value",
				"  assert TestUtils.generic_fake_result == response.json['data']",
				"",
				"# assert",
				"  for index, call_args in enumerate($2_mock.call_args_list):",
				"    positional_args = call_args[0]",
				"    keywords_args = call_args[1]",
				"    assert positional_args == (req_body['data'],)",
				""
    ]
	},
	"flask pytest: testcase manager fn":{
		"prefix":"flask pytest: testcase manager fn",
		"body":[
			"def test_$1(mocker,monkeypatch):",
			"  def test_default_behaviour():",
			"    set_mocks(monkeypatch)",
			"    # arrange",
			"    manager = $2()",
			"",
			"    # act",
			"    result = manager.$1()",
			"",
			"    # assert",
			"  test_default_behaviour()"
		]
	},
	"flask pytest: test case file": {
		"scope": "python",
		"prefix": "flask pytest: test case file",
		"body": [
			"import string",
			"from unit_tests.conftest import ImportStrings",
			"",
			"class TestImportStrings(ImportStrings):",
			"  def $1(self, x=''):",
			"    return '$3' + self.append_submodule(x)",
			"",
			"import_strings = TestImportStrings()",
			"",
			"def set_mocks(monkeypatch):",
			"#  monkeypatch.setattr(",
			"#    import_strings.$1(\"Dummy\"),",
			"#    FakeDummy",
			"#  )",
			"",
			"def create_class_params():",
			"  return {}"
		],
		"description": "Print if dev test class and related functions"
	},
	"flask pytest: create mock method on mock object":{
		"prefix":"flask pytest: create mock method on mock object",
		"body":[
			"$1_result = {}",
			"def $1(self,*args,**kwargs):",
			"  return self.$1_result"
		]
	},
	"flask pytest: create test for call_args":{
		"prefix":"flask pytest: create test for call_args",
		"body":[
			"for index, call_args in enumerate($1.call_args_list):",
			"  positional_args,keywords_args = call_args",
			"  assert positional_args == ()",
			"  assert keywords_args == {}"
		]
	},
	"flask pytest: create method mock":{
		"prefix":"flask pytest: create method mock",
		"body":[
			"$1_mock_return_value = \"$1\"",
			"$1_mock = mocker.patch(",
			"  import_strings.$2(\"$1\"),",
			"  return_value=$1_mock_return_value",
			")"
		]
	},
	"flask: sqlalchemy query":{
		"prefix":"conn.execute",
		"body":[
			"stmt = text(\"\"\"\n$1\n\"\"\")\nself.sqlalchemy_0_conn.execute(stmt,{\n})\nself.sqlalchemy_0_conn.commit()"
		]
	},
	"python: it when called":{
		"prefix":"conn.execute",
		"body":[
			"when called",
			"under normal conditions",
			"does the required action"
		]
	},
	"python: kwargs.get":{
		"prefix":"kwargs",
		"body":[
			"$1 = kwargs.get(\"$1\",None)"
		]
	},
	"python: class":{
		"prefix":"class",
		"body":[
			"class $1():",
			"  def __init__(self,*args,**kwargs):",
			"    None"
		]
	}



}

