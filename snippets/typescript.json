{

	"class with filter constructor":{
		"prefix": "class",
		"body": [
			"export class $1 {",
			"  constructor(props: Partial<$1> = {}) {",
			"    let origProps = Object.entries(props)",
			"      .filter(([key,val]) => {",
			"        return !key.startsWith('param');",
			"      });",
			"    Object.assign(this, { ...Object.fromEntries(origProps) });",
			"  }",
			"}"
		],
		"description": "Creates a class with a filtered constructor"
	},
	"class with filter WMLConstructorDecorator":{
		"prefix": "class",
		"body": [
			"@WMLConstructorDecorator",
			"export class $1 {",
			"  constructor(props: Partial<$1> = {}) { }",
			"}"
		],
		"description": "Creates a class with the WMLConstructorDecorator"
	},
	"takeUntil":{
		"prefix": "takeUntil",
		"body":"takeUntil(this.ngUnsub),"
	},
	"ngOnDestroy":{
		"prefix": "ngOnDestroy",
		"body": "ngOnDestroy(){\n\tthis.ngUnsub.next();\n\tthis.ngUnsub.complete()\n}"
	},
	"subscribe":{
		"prefix": "pipe(",
		"body": ".pipe(\n\ttakeUntil(this.ngUnsub),\n\ttap(()=>{\n\n\t})\n)\n"
	},
	"beforeEach":{
		"prefix": "beforeEach",
		"body": "beforeEach(()=>{\n\n})"
	},
	"generateArray":{
		"prefix": "Array(",
		"body": "Array($1)\n.fill(null)\n.map((nullVal,index0)=>{\n\n})"
	},
	"forEach":{
		"prefix": "forEach",
		"body": ".forEach(($1)=>{$2\n\n})"
	},
	"map":{
		"prefix": "map",
		"body": ".map(($1)=>{$2\n\n})"
	},
	"filter":{
		"prefix": "filter",
		"body": ".filter(($1)=>{$2\n\n})"
	},
	"reduce":{
		"prefix": "reduce",
		"body": ".reduce((acc,$1)=>{$2\n\n})"
	},
	"modern endpoint":{
		"prefix":"iif",
		"body":[
			"return iif(\n\t()=>$1,\n\tof(null),$2\n)"
		]
	},

	"js comment":{
		"prefix": "js comment ",
		"body": "/**\n * @$0 $1\n*/"
	},
	"angular: Env form control name":{
		"prefix": "FormControlName ",
		"body": "$1FormControlName:\"$1\""
	},
	"import translation file":{
		"prefix":"import enTranslations",
		"body":"import enTranslations from \"src/assets/i18n/en.json\";"
	},
	"wml color":{
		"prefix":"orig",
		"body":"wml$1:rootStyle().getPropertyValue('--wml-$2'),\nwmlOrig$1:rootStyle().getPropertyValue('--wml-orig-$2'),"
	},
	"angular navigate":{
		"prefix":"navigate",
		"body":"this.utilService.router.navigateByUrl(ENV.nav.urls.$1)"
	},
	"angular ViewChild":{
		"prefix":"ViewChild",
		"body":" @ViewChild(\"$1\",{read:ViewContainerRef}) $1 :ViewContainerRef"
	},
	"angular wml-form":{
		"prefix":"wml-form",
		"body":"<wml-form [props]=$1></wml-form>"
	},
	"angular WMLMotionUIProperty": {
		"prefix": "wmlmotion",
		"body": [
			"$1 = new WMLMotionUIProperty({",
			"  class: this.classPrefix('Pod0'),",
			"  keyFrameStyles: {",
			"    '0%': {",
			"      $2",
			"    },",
			"    '100%': {",
			"      $3",
			"    },",
			"  }",
			"})"
		],
		"description": "Create WMLMotionUIProperty"
	},
	"angular jasmine describe":{
		"prefix": "describe",
		"body": "describe(\"$1\",()=>{\n\n})"
	},
	"angular jasmine it":{
		"prefix": "it",
		"body": ["it(` when called | ",
			"under normal conditions | ",
			"does the required action `,()=>{",
			"  // arrange",
			"  $1",
			"  // act",
			"  ",
			"  // assert",
			"  ",
			"})"
		]
	},
	"angular jasmine it for async tests":{
		"prefix": "it for async tests",
		"body": ["it(` when called | ",
			"  under normal conditions | ",
			"  does the required action `,fakeAsync(()=>{",
			"  // arrange",
			"  let fn = (val?)=>{",
			"    // assert",
			"    discardPeriodicTasks()",
			"  }",
			"   // act",
			"  $2",
			"  .subscribe({next:fn,complete:fn})",
			"  flush()",
			"  ",
			"  }))"
		]
	},
	"angular jasmine expect toBeInstanceOf":{
		"prefix":"toBeInstanceOf",
		"body":[
			"expect(cpnt.$1).toBeInstanceOf($2)"
		]
	},
	"angular jasmine expect equal":{
		"prefix":"toEqual",
		"body":[
			"expect(cpnt.$1).toEqual($2)"
		]
	},
	"angular jasmine spyOn":{
		"prefix":"spyOn",
		"body":[
			"spyOn(cpnt$1,\"$2\")"
		]
	},
	"angular jasmine spyOn and callThrough":{
		"prefix":"callThrough",
		"body":[
			"spyOn(cpnt$1,\"$2\").and.callThrough()"
		]
	},
	"angular jasmine toHaveBeenCalledWith":{
		"prefix":"toHaveBeenCalledWith",
		"body":[
			"expect(cpnt.$1).toHaveBeenCalledWith($2)"
		]
	},
	"angular jasmine mockMethod":{
		"prefix":"mockMethod",
		"body":[
			"$1Result,",
			"$1:() => $1Result,"
		]
	},
	"angular jasmine spyOnForES6Imports":{
		"prefix":".spyOnForES6Imports",
		"body":[
			"wmlTestUtils",
			"  .spyOnForES6Imports($1,'$2')"
		]
	},
	"angular jasmine mock Provider":{
		"prefix":"mockProvider",
		"body": [
			"const mock$1 = () => {",
			"  let service  = new $1(",
			"    // @ts-ignore",
			"    mockUtilService(), mockBaseService()",
			"  );",

			"",
			"  Object.assign(service, {",
			"  });",
			"  return service;",
			"};"
		],
		"description": "Creates a mock provider to be used in mock-providers.ts."
	}
}
